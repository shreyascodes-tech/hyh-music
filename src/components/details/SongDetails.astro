---
import { getLyrics, Song } from "../../api/main";

export interface Props {
  song: Song[];
}

const qualities = ["12kbps", "48kbps", "96kbps", "160kbps", "320kbps"];
const names = ["Lowest", "Low", "Medium", "High", "Ultra"];

const {
  song: [song],
}: Props = Astro.props;

const imageUrl = () =>
  (song.image as any).find((a: any) => a.quality === "500x500").link as string;

const songUrl = () =>
  song.downloadUrl.find((s) => s.quality === "160kbps")!.link;

const lyrics = song.hasLyrics ? await getLyrics(song.id) : [];
---

<div class="flex flex-col items-center lg:flex-row lg:items-start">
  <div class="flex flex-col items-center p-4 gap-4 lg:sticky lg:top-[100px]">
    <h1 class="text-center text-2xl font-bold">{song.name}</h1>
    <img
      class="max-w-full w-64 rounded-lg overflow-hidden"
      src={imageUrl()}
      alt=""
    />
    <div
      class="bg-[#3b3b3b] w-full pr-10 flex relative items-stretch rounded-full focus-within:ring-2 ring-offset-2 ring-offset-slate-900"
    >
      <audio id="main-audio" class="outline-none" controls src={songUrl()}
      ></audio>

      <div class="absolute right-3 top-0 bottom-0 w-12">
        <select name="quality" class="opacity-0" id="quality-select">
          {
            qualities.map((q, i) => (
              <option selected={q === "160kbps"} value={q}>
                {names[i]}
              </option>
            ))
          }
        </select>
        <div
          class="absolute inset-0 grid place-items-center pointer-events-none"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor"
            class="w-6 h-6"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.003.827c-.293.24-.438.613-.431.992a6.759 6.759 0 010 .255c-.007.378.138.75.43.99l1.005.828c.424.35.534.954.26 1.43l-1.298 2.247a1.125 1.125 0 01-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 01-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.941-1.11.941h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 01-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 01-1.369-.49l-1.297-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.292-.24.437-.613.43-.992a6.932 6.932 0 010-.255c.007-.378-.138-.75-.43-.99l-1.004-.828a1.125 1.125 0 01-.26-1.43l1.297-2.247a1.125 1.125 0 011.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.214-1.281z"
            ></path>
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
          </svg>
        </div>
      </div>
    </div>
  </div>
  {
    song.hasLyrics && (
      <div class="text-center text-lg mx-auto max-h-[40vh] lg:max-h-[85vh] overflow-auto p-4 bg-black/20 rounded">
        <h2 class="my-4 text-xl font-bold">Lyrics</h2>
        {lyrics.map((line) => (line === "" ? <br /> : <p>{line}</p>))}
        <p>---</p>
      </div>
    )
  }
</div>

<script define:vars={{ song }}>
  const qualitySelector = document.getElementById("quality-select");
  const audioEl = document.getElementById("main-audio");
  audioEl.focus();
  qualitySelector.addEventListener("change", (e) => {
    const quality = e.target.value;
    audioEl.pause();
    const time = audioEl.currentTime;
    audioEl.src = song.downloadUrl.find((s) => s.quality === quality).link;
    audioEl.addEventListener(
      "canplay",
      () => {
        audioEl.currentTime = time;
        audioEl.focus();
        audioEl.play();
      },
      { once: true }
    );
  });
</script>
